folder: src/main/java/com.kamark.kamark

config
	tu znajdują się konfiguracje SpringSecurity, Cors, Swagger, Filtr tokenów JWT

controller
	controllery zawsze zwracają ResponseEntity<> o jakimś wyznaczonym body.
	controllery NIE walidują danych.

dto
	dto to są modele zwracanych obiektów. (service zwracają obiekty dto)
	DTO (tylko te wejściowe) zostały opatrzone automatyczną walidacją pól dzięki jakarta.validation.constraints.
	Klient dostanie w Postmanie odpowiedzi, jeśli format danych nie będzie zgodny z walidacją.

service
	service zawsze zwracają DTO lub Entity. (zasoby)
	service robią throw new Exception, jeśli nie uda się np. pobrać danych lub wystąpi niezgodność.
	service implementują interfejsy. 

entity
	entity to są modele mapowane na bazę danych.

exceptions
	GlobalExceptionHandler wyłapuje wszystkie wyrzucone przez service błędy 
	i opakowuje je w odpowiedź do klienta.
	np. ResponseEntity<>(new ErrorResponse(404, ex.getMessage()), HttpStatus.NOT_FOUND);

	GlobalExceptionHandler to @RestControllerAdvice, czyli łączy się z żądaniem-odpowiedzią.
	Pomaga "odpowiadać" endpointom na trasach.

	Mamy tutaj też nasze customowe wyjątki np. UserAccessDeniedException i też są one obsłużone
	przez GlobalExceptionHandler.

repository
	Repository jeśli ma zwrócić pojedzynczy zasób z bazy danych zwraca ZAWSZE Optional - bo w bazie
	może być rekord lub NIE. Chyba, że zliczamy lub mamy własne zdefiniowane metody typu boolean, 	Integer, to zwróci te typy.
	List<Zasób> może być po prostu pusta, zatem nie potrzebujemy Optional.

folder resources
    messages.properties to plik, w którym są globalnie określone wiadomości błędów walidacji konkretnych DTO dla jakarta.validation.constraints.
    application.properties to plik, w którym są globalne ustawienia aplikacji, np. port, baza danych, itp.